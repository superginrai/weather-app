{"version":3,"sources":["components/ResultWeather/ResultWeather.js","components/ResultForecast/ResultForecast.js","components/ForecastPage/ForecastPage.js","App.js","serviceWorker.js","redux/reducers/searchResultsReducer.js","redux/reducers/index.js","redux/sagas/searchApiSaga.js","redux/sagas/index.js","index.js"],"names":["WeatherCard","props","state","weather","location","result","data","name","region","temp","current","temp_f","condition","text","icon","minTemp","forecast","forecastday","day","mintemp_f","maxTemp","maxtemp_f","precip","totalprecip_in","classes","this","Card","className","card","CardContent","Typography","gutterBottom","variant","component","src","alt","ExpansionPanel","ExpansionPanelSummary","expandIcon","ExpansionPanelDetails","Component","connect","withStyles","theme","maxWidth","marginBottom","media","height","button","margin","spacing","unit","ForecastCard","handleExpandClick","setState","expanded","date","slice","moon","expand","transform","transition","transitions","create","duration","shortest","marginLeft","expandOpen","ForecastPage","handleSearch","event","search","target","value","apiCall","preventDefault","action","type","payload","dispatch","console","log","root","Grid","container","justify","Paper","alignitems","paper","onSubmit","item","xs","FormControl","InputLabel","htmlFor","Input","onChange","placeholder","style","marginTop","Button","size","color","sm","searchResults","map","ResultWeather","key","id","ResultForecast","flexGrow","alignItems","padding","textAlign","palette","secondary","App","Boolean","window","hostname","match","combineReducers","store","searchApi","searchApiSaga","call","axios","get","process","JSON","stringify","swal","title","takeEvery","rootSaga","all","middlewares","sagaMiddleware","createSagaMiddleware","push","storeInstance","createStore","reducer","applyMiddleware","run","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mXAgCMA,E,YACF,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KACDC,MAAQ,CACTC,QAAS,CACLC,SAAU,EAAKH,MAAMI,OAAOC,KAAKF,SAASG,KAC1CC,OAAQ,EAAKP,MAAMI,OAAOC,KAAKF,SAASI,OACxCC,KAAM,EAAKR,MAAMI,OAAOC,KAAKI,QAAQC,OACrCC,UAAW,EAAKX,MAAMI,OAAOC,KAAKI,QAAQE,UAAUC,KACpDC,KAAM,EAAKb,MAAMI,OAAOC,KAAKI,QAAQE,UAAUE,KAC/CC,QAAS,EAAKd,MAAMI,OAAOC,KAAKU,SAASC,YAAY,EAAKhB,MAAMiB,KAAKA,IAAIC,UACzEC,QAAS,EAAKnB,MAAMI,OAAOC,KAAKU,SAASC,YAAY,EAAKhB,MAAMiB,KAAKA,IAAIG,UACzEC,OAAQ,EAAKrB,MAAMI,OAAOC,KAAKU,SAASC,YAAY,EAAKhB,MAAMiB,KAAKA,IAAIK,iBAXjE,E,sEAgBT,IACEC,EAAYC,KAAKxB,MAAjBuB,QACR,OACI,6BACI,kBAACE,EAAA,EAAD,CAAMC,UAAWH,EAAQI,MACrB,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAYC,cAAY,EAACC,QAAQ,WAAWC,UAAU,MACjDR,KAAKvB,MAAMC,QAAQC,SADxB,KACoCqB,KAAKvB,MAAMC,QAAQK,QAEvD,yBAAK0B,IAAKT,KAAKvB,MAAMC,QAAQW,KAAMqB,IAAI,mBACvC,kBAACL,EAAA,EAAD,CAAYC,cAAY,EAACC,QAAQ,WAAWC,UAAU,MACjDR,KAAKvB,MAAMC,QAAQS,WAExB,kBAACkB,EAAA,EAAD,CAAYC,cAAY,EAACC,QAAQ,WAAWC,UAAU,MACjDR,KAAKvB,MAAMC,QAAQM,KADxB,QAGA,kBAACqB,EAAA,EAAD,CAAYC,cAAY,EAACC,QAAQ,WAAWC,UAAU,MAAtD,SACWR,KAAKvB,MAAMC,QAAQiB,QAD9B,aAEUK,KAAKvB,MAAMC,QAAQY,QAF7B,SAKA,kBAACqB,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAuBC,WAAY,kBAAC,IAAD,QAEnC,kBAACC,EAAA,EAAD,KACA,kBAACT,EAAA,EAAD,CAAYC,cAAY,EAACC,QAAQ,WAAWC,UAAU,MAAtD,kBACoBR,KAAKvB,MAAMC,QAAQmB,OADvC,gB,GA1CFkB,aAyDXC,eA/DS,SAAAvC,GAAK,MAAK,KA+DnBuC,CAAyBC,aA5EzB,SAAAC,GAAK,MAAK,CACrBf,KAAM,CACFgB,SAAU,IACVC,aAAc,IAElBC,MAAO,CACHC,OAAQ,KAEZC,OAAQ,CACJC,OAAQN,EAAMO,QAAQC,SAmEUT,CAAmB1C,IClDrDoD,E,YACF,WAAYnD,GAAQ,IAAD,8BACf,4CAAMA,KAiBVoD,kBAAoB,WAChB,EAAKC,UAAS,SAAApD,GAAK,MAAK,CAAEqD,UAAWrD,EAAMqD,cAjB3C,EAAKrD,MAAQ,CACTC,QAAS,CACLqD,KAAO,EAAKvD,MAAMI,OAAOC,KAAKU,SAASC,YAAY,EAAKhB,MAAMiB,KAAKsC,KAAMC,MAAM,GAC/E3C,KAAM,EAAKb,MAAMI,OAAOC,KAAKU,SAASC,YAAY,EAAKhB,MAAMiB,KAAKA,IAAIN,UAAUE,KAChFC,QAAS,EAAKd,MAAMI,OAAOC,KAAKU,SAASC,YAAY,EAAKhB,MAAMiB,KAAKA,IAAIC,UACzEC,QAAS,EAAKnB,MAAMI,OAAOC,KAAKU,SAASC,YAAY,EAAKhB,MAAMiB,KAAKA,IAAIG,UACzEC,OAAQ,EAAKrB,MAAMI,OAAOC,KAAKU,SAASC,YAAY,EAAKhB,MAAMiB,KAAKA,IAAIK,gBAE5EgC,UAAU,GAVC,E,mHAsBT,IACE/B,EAAYC,KAAKxB,MAAjBuB,QACR,OACI,6BACI,kBAACE,EAAA,EAAD,CAAMC,UAAWH,EAAQI,MACrB,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAYC,cAAY,EAACC,QAAQ,WAAWC,UAAU,MACjDR,KAAKvB,MAAMC,QAAQqD,MAExB,yBAAKtB,IAAKT,KAAKvB,MAAMC,QAAQW,KAAMqB,IAAI,mBACvC,kBAACL,EAAA,EAAD,CAAYC,cAAY,EAACC,QAAQ,WAAWC,UAAU,MAAtD,SACWR,KAAKvB,MAAMC,QAAQiB,QAD9B,aAEUK,KAAKvB,MAAMC,QAAQY,QAF7B,SAKJ,kBAACqB,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAuBC,WAAY,kBAAC,IAAD,QAEnC,kBAACC,EAAA,EAAD,KACA,yBAAKL,IAAKT,KAAKvB,MAAMC,QAAQuD,KAAMvB,IAAKV,KAAKvB,MAAMC,QAAQuD,OAC3D,kBAAC5B,EAAA,EAAD,CAAYC,cAAY,EAACC,QAAQ,WAAWC,UAAU,MAAtD,iBACkB,6BACbR,KAAKvB,MAAMC,QAAQmB,OAFxB,gB,GA3CGkB,aA2DZC,eA/DS,SAAAvC,GAAK,MAAK,KA+DnBuC,CAAyBC,aAtFzB,SAAAC,GAAK,MAAK,CACrBf,KAAM,CACFgB,SAAU,IACVC,aAAc,IAElBC,MAAO,CACHC,OAAQ,KAEZC,OAAQ,CACJC,OAAQN,EAAMO,QAAQC,MAE1BQ,OAAQ,CACJC,UAAW,eACXC,WAAYlB,EAAMmB,YAAYC,OAAO,YAAa,CAC9CC,SAAUrB,EAAMmB,YAAYE,SAASC,WAEzCC,WAAY,QAEhBC,WAAY,CACRP,UAAW,qBAmEqBlB,CAAmBU,IChErDgB,E,YAEJ,WAAYnE,GAAQ,IAAD,8BACjB,4CAAMA,KAQRoE,aAAe,kBAAM,SAAAC,GACnB,EAAKhB,SAAL,eACO,EAAKpD,MAAMqE,OADlB,CAEIA,OAAQD,EAAME,OAAOC,WAZR,EAiBnBC,QAAU,SAAAJ,GACRA,EAAMK,iBACN,IAAMC,EAAS,CAAEC,KAAM,qBAAsBC,QAAS,EAAK5E,MAAMqE,QACjE,EAAKtE,MAAM8E,SAASH,GACpBI,QAAQC,IAAIL,GACZI,QAAQC,IAAI,EAAK/E,MAAMqE,QACvB,EAAKjB,SAAS,CACViB,OAAQ,MArBZ,EAAKrE,MAAQ,CACTqE,OAAQ,IAJK,E,sEA6BT,IACG/C,EAAYC,KAAKxB,MAAjBuB,QACT,OACE,yBAAKG,UAAWH,EAAQ0D,MACpB,kBAACC,EAAA,EAAD,CAAMC,WAAS,EAAClC,QAAS,EAAGmC,QAAS,UACjC,kBAACC,EAAA,EAAD,CAAOC,WAAY,SAAU5D,UAAWH,EAAQgE,OAC5C,0BAAMC,SAAUhE,KAAKiD,SACjB,kBAACS,EAAA,EAAD,CAAMO,MAAI,EAACC,IAAE,GACT,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAYC,QAAQ,aAApB,WAEI,kBAACC,EAAA,EAAD,CAAOpE,UAAU,QAAQqE,SAAUvE,KAAK4C,eAAgBI,MAAOhD,KAAKvB,MAAMqE,OAAQ0B,YAAY,kBAG1G,kBAACd,EAAA,EAAD,CAAMO,MAAI,EAACC,IAAE,EAACO,MAAO,CAAEC,UAAW,KAC9B,kBAACC,EAAA,EAAD,CAAQpE,QAAQ,YAAYqE,KAAK,QAAQC,MAAM,UAAUzB,KAAK,UAA9D,oBAOR,kBAACM,EAAA,EAAD,CAAMC,WAAS,EAAClC,QAAS,EAAGqC,WAAY,SAAUF,QAAS,SAAU1D,UAAWH,EAAQgE,OACpF,kBAACL,EAAA,EAAD,CAAMC,WAAS,EAACM,MAAI,EAACC,GAAI,GAAIY,GAAI,GAC7B,4BACK9E,KAAKxB,MAAMuG,cAAcC,KAAI,SAAApG,GAAM,OAChC,kBAACqG,EAAD,CAAeC,IAAKtG,EAAOuG,GAAIvG,OAAQA,EAAQa,IAAK,SAGhE,kBAACiE,EAAA,EAAD,CAAMC,WAAS,EAACM,MAAI,EAACC,GAAI,GAAIY,GAAI,GAC7B,4BACK9E,KAAKxB,MAAMuG,cAAcC,KAAI,SAAApG,GAAM,OAChC,kBAACwG,EAAD,CAAgBF,IAAKtG,EAAOuG,GAAIvG,OAAQA,EAAQa,IAAK,SAGjE,kBAACiE,EAAA,EAAD,CAAMC,WAAS,EAACM,MAAI,EAACC,GAAI,GAAIY,GAAI,GAC7B,4BACK9E,KAAKxB,MAAMuG,cAAcC,KAAI,SAAApG,GAAM,OAChC,kBAACwG,EAAD,CAAgBF,IAAKtG,EAAOuG,GAAIvG,OAAQA,EAAQa,IAAK,SAGjE,kBAACiE,EAAA,EAAD,CAAMC,WAAS,EAACM,MAAI,EAACC,GAAI,GAAIY,GAAI,GAC7B,4BACK9E,KAAKxB,MAAMuG,cAAcC,KAAI,SAAApG,GAAM,OAChC,kBAACwG,EAAD,CAAgBF,IAAKtG,EAAOuG,GAAIvG,OAAQA,EAAQa,IAAK,e,GA3E9DsB,aA0FZC,eA9Fc,SAAAvC,GAAK,MAAK,CACnCsG,cAAetG,EAAMsG,cAAcA,iBA6FxB/D,CAA8BC,aA/G9B,SAAAC,GAAK,MAAK,CACvBuC,KAAM,CACF4B,SAAU,EACVzB,QAAS,SACT0B,WAAY,UAEhBvB,MAAO,CACHH,QAAS,SACT0B,WAAY,SACZC,QAASrE,EAAMO,QAAQ,GACvB+D,UAAW,SACXd,UAAW,OACXG,MAAO3D,EAAMuE,QAAQrG,KAAKsG,cAmGazE,CAAmB0B,IChHjDgD,MARf,WACE,OACE,yBAAKzF,UAAU,OACb,kBAAC,EAAD,Q,QCKc0F,QACW,cAA7BC,OAAOlH,SAASmH,UAEe,UAA7BD,OAAOlH,SAASmH,UAEhBD,OAAOlH,SAASmH,SAASC,MACvB,2D,YCFSC,cAAgB,CAC3BjB,cAdkB,WAAyB,IAAxBtG,EAAuB,uDAAf,GAAI0E,EAAW,uCAC1C,OAAQA,EAAOC,MACX,IAAK,iBAGD,OAFAG,QAAQC,IAAIL,EAAOE,SACnBE,QAAQC,IAAI/E,GACL,CAAC0E,EAAOE,SACnB,IAAK,gBACG,MAAO,GACf,QACI,OAAO5E,MCLJwH,EAJDD,YAAgB,CAC5BjB,kB,qDCGQmB,G,WAqBAC,GArBV,SAAUD,EAAU/C,GAApB,uEAEQ,OAFR,kBAEcG,YAAS,CACXF,KAAM,kBAHlB,OAKuB,OALvB,SAK6BgD,YAAMC,IAAMC,IAAR,0DAAgEC,kCAAhE,cAAmGpD,EAAOE,QAA1G,YALjC,OAMQ,OADMP,EALd,gBAMc0D,KAAKC,UAAU3D,GAN7B,OAOQ,OAPR,UAOcQ,YAAS,CACXF,KAAM,iBACNC,QAASP,IATrB,0DAYQ4D,IAAK,CACDC,MAAO,mBACPvH,KAAM,yCACNC,KAAM,YAflB,sDAqBA,SAAU8G,IAAV,iEACI,OADJ,SACUS,YAAU,qBAAsBV,GAD1C,uCAIeC,Q,WC7BUU,GAAV,SAAUA,IAAV,iEACb,OADa,SACPC,YAAI,CACRX,MAFW,uCCaf,IACMY,GAAc,GACdC,GAAiBC,cACvBF,GAAYG,KAAKF,IAEjB,IAAMG,GAAgBC,YACpBC,EANqB,GAQrBC,IAAe,WAAf,EAAmBP,KAGrBC,GAAeO,IAAIV,GAEnBW,IAASC,OACL,kBAAC,IAAD,CAAUxB,MAAOkB,IACjB,kBAAC,EAAD,OAEFO,SAASC,eAAe,SLkGpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.bd9c1287.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { withStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport Typography from '@material-ui/core/Typography';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\n\n\nconst styles = theme => ({\n    card: {\n        maxWidth: 400,\n        marginBottom: 50,\n    },\n    media: {\n        height: 530,\n    },\n    button: {\n        margin: theme.spacing.unit,\n    },\n});\n\nconst mapStateToProps = state => ({\n\n});\n\n\n//Builds and renders a MaterialUI card of current weather conditions for display on the DOM\nclass WeatherCard extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            weather: {\n                location: this.props.result.data.location.name,\n                region: this.props.result.data.location.region,\n                temp: this.props.result.data.current.temp_f,\n                condition: this.props.result.data.current.condition.text,\n                icon: this.props.result.data.current.condition.icon,\n                minTemp: this.props.result.data.forecast.forecastday[this.props.day].day.mintemp_f,\n                maxTemp: this.props.result.data.forecast.forecastday[this.props.day].day.maxtemp_f,\n                precip: this.props.result.data.forecast.forecastday[this.props.day].day.totalprecip_in, \n            }\n        }\n    }\n\n    render() {\n        const { classes } = this.props;\n        return (\n            <div>\n                <Card className={classes.card}>\n                    <CardContent>\n                        <Typography gutterBottom variant=\"headline\" component=\"h2\">\n                            {this.state.weather.location}, {this.state.weather.region}\n                        </Typography>\n                        <img src={this.state.weather.icon} alt=\"condition icon\"></img>\n                        <Typography gutterBottom variant=\"headline\" component=\"h4\">\n                            {this.state.weather.condition}\n                        </Typography>\n                        <Typography gutterBottom variant=\"headline\" component=\"h1\">\n                            {this.state.weather.temp}&#176;\n                        </Typography>\n                        <Typography gutterBottom variant=\"headline\" component=\"h4\">\n                            High: {this.state.weather.maxTemp}&#176;\n                            Low: {this.state.weather.minTemp}&#176;\n                        </Typography>\n                    </CardContent>\n                        <ExpansionPanel>\n                            <ExpansionPanelSummary expandIcon={<ExpandMoreIcon />}>\n                            </ExpansionPanelSummary>\n                            <ExpansionPanelDetails>\n                            <Typography gutterBottom variant=\"headline\" component=\"h4\">\n                                Precipitation: {this.state.weather.precip} in.\n                            </Typography>\n                            </ExpansionPanelDetails>\n                        </ExpansionPanel>\n                </Card>\n            </div>\n        );\n    }\n}\n\nWeatherCard.propTypes = {\n    classes: PropTypes.object.isRequired,\n};\n\nexport default connect(mapStateToProps)(withStyles(styles)(WeatherCard));","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { withStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport Typography from '@material-ui/core/Typography';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\n\nconst styles = theme => ({\n    card: {\n        maxWidth: 400,\n        marginBottom: 50,\n    },\n    media: {\n        height: 530,\n    },\n    button: {\n        margin: theme.spacing.unit,\n    },\n    expand: {\n        transform: 'rotate(0deg)',\n        transition: theme.transitions.create('transform', {\n            duration: theme.transitions.duration.shortest,\n        }),\n        marginLeft: 'auto',\n    },\n    expandOpen: {\n        transform: 'rotate(180deg)',\n    },\n});\n\nconst mapStateToProps = state => ({\n});\n\n//Builds and renders a MaterialUI card of a forecast day for display on the DOM\nclass ForecastCard extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            weather: {\n                date: (this.props.result.data.forecast.forecastday[this.props.day].date).slice(5),\n                icon: this.props.result.data.forecast.forecastday[this.props.day].day.condition.icon,\n                minTemp: this.props.result.data.forecast.forecastday[this.props.day].day.mintemp_f,\n                maxTemp: this.props.result.data.forecast.forecastday[this.props.day].day.maxtemp_f,\n                precip: this.props.result.data.forecast.forecastday[this.props.day].day.totalprecip_in,            \n            },\n            expanded: false\n        }\n    }\n\n    componentDidMount () {\n    \n    };\n\n    handleExpandClick = () => {\n        this.setState(state => ({ expanded: !state.expanded }));\n    };\n\n    render() {\n        const { classes } = this.props;\n        return (\n            <div>\n                <Card className={classes.card}>\n                    <CardContent>\n                        <Typography gutterBottom variant=\"headline\" component=\"h3\">\n                            {this.state.weather.date}\n                        </Typography>\n                        <img src={this.state.weather.icon} alt=\"condition icon\"></img>\n                        <Typography gutterBottom variant=\"headline\" component=\"h4\">\n                            High: {this.state.weather.maxTemp}&#176;\n                            Low: {this.state.weather.minTemp}&#176;\n                        </Typography>\n                    </CardContent>\n                    <ExpansionPanel>\n                        <ExpansionPanelSummary expandIcon={<ExpandMoreIcon />}>\n                        </ExpansionPanelSummary>\n                        <ExpansionPanelDetails>\n                        <img src={this.state.weather.moon} alt={this.state.weather.moon}></img>\n                        <Typography gutterBottom variant=\"headline\" component=\"h4\">\n                            Precipitation:<br/>\n                            {this.state.weather.precip} in.\n                        </Typography>\n                        </ExpansionPanelDetails>\n                    </ExpansionPanel>\n                </Card>\n            </div>\n        );\n    }\n}\n\nForecastCard.propTypes = {\n    classes: PropTypes.object.isRequired,\n};\n\nexport default connect(mapStateToProps)(withStyles(styles)(ForecastCard));","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport Input from '@material-ui/core/Input';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport Button from '@material-ui/core/Button';\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport ResultWeather from '../ResultWeather/ResultWeather'\nimport ResultForecast from '../ResultForecast/ResultForecast'\n\nconst styles = theme => ({\n  root: {\n      flexGrow: 1,\n      justify: 'center',\n      alignItems: 'center',\n  },\n  paper: {\n      justify: 'center',\n      alignItems: 'center',\n      padding: theme.spacing(3),\n      textAlign: 'center',\n      marginTop: '50px',\n      color: theme.palette.text.secondary,\n  },\n});\n\n\nconst mapReduxStateToProps = state => ({\n    searchResults: state.searchResults.searchResults,\n});\n\nclass ForecastPage extends Component {\n  \n  constructor(props) {\n    super(props)\n\n    this.state = {\n        search: '',\n    };\n}\n  \n  //Updates the value of this.state.search in real time as the user inputs the \"Search\" field \n  handleSearch = () => event => {\n    this.setState({\n        ...this.state.search,\n        search: event.target.value,\n    });\n  }\n\n  //Sends the current value of this.state.search to redux to make a call to WeatherAPI.com\n  apiCall = event => {\n    event.preventDefault();\n    const action = { type: 'SEARCH_WEATHER_API', payload: this.state.search, };\n    this.props.dispatch(action);\n    console.log(action);\n    console.log(this.state.search);\n    this.setState({   \n        search: '',        \n    });\n\n  };\n\n  render() {\n       const { classes } = this.props;\n      return (\n        <div className={classes.root}>\n            <Grid container spacing={3} justify={'center'}>\n                <Paper alignitems={'center'} className={classes.paper}>\n                    <form onSubmit={this.apiCall}>\n                        <Grid item xs>\n                            <FormControl>\n                                <InputLabel htmlFor=\"apiSearch\">\n                                    Search:</InputLabel>\n                                    <Input className=\"input\" onChange={this.handleSearch()} value={this.state.search} placeholder='city or zip' />\n                            </FormControl>\n                        </Grid>\n                        <Grid item xs style={{ marginTop: 35 }}>\n                            <Button variant=\"contained\" size=\"small\" color=\"primary\" type=\"submit\">\n                                GET FORECAST</Button>\n                        </Grid>\n                    </form>\n                    </Paper>\n            </Grid>\n                {/* <Paper alignitems={'center'} className={classes.paper}> */}\n                    <Grid container spacing={3} alignitems={'center'} justify={'center'} className={classes.paper}>     \n                        <Grid container item xs={12} sm={3}>\n                            <ul>\n                                {this.props.searchResults.map(result =>\n                                    <ResultWeather key={result.id} result={result} day={0}/>)}\n                            </ul>\n                        </Grid>\n                        <Grid container item xs={12} sm={3}>\n                            <ul>\n                                {this.props.searchResults.map(result =>\n                                    <ResultForecast key={result.id} result={result} day={1}/>)}\n                            </ul>\n                        </Grid>\n                        <Grid container item xs={12} sm={3}>\n                            <ul>\n                                {this.props.searchResults.map(result =>\n                                    <ResultForecast key={result.id} result={result} day={2}/>)}\n                            </ul>\n                        </Grid>\n                        <Grid container item xs={12} sm={3}>\n                            <ul>\n                                {this.props.searchResults.map(result =>\n                                    <ResultForecast key={result.id} result={result} day={3}/>)}\n                            </ul>\n                        </Grid>\n                    </Grid>\n                {/* </Paper> */}\n           {/* </Grid> */}\n        </div>\n        );\n    }\n}\n\nForecastPage.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default connect(mapReduxStateToProps)(withStyles(styles)(ForecastPage));","import React, { Component } from 'react';\nimport './index.css';\nimport ForecastPage from './components/ForecastPage/ForecastPage';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <ForecastPage></ForecastPage>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { combineReducers } from 'redux';\n\n//Stores API results for access by the DOM\nconst searchResults = (state = [], action) => {\n    switch (action.type) {\n        case 'SEARCH_RESULTS':\n            console.log(action.payload);\n            console.log(state);\n            return [action.payload];\n        case \"CLEAR_RESULTS\":\n                return [];    \n        default:\n            return state;\n    }\n};\n\nexport default combineReducers({\n    searchResults,\n});","import { combineReducers } from 'redux';\nimport searchResults from './searchResultsReducer';\n\nconst store = combineReducers({\n  searchResults,\n});\n\nexport default store;\n","import axios from 'axios';\nimport { takeEvery, call, put as dispatch } from 'redux-saga/effects';\nimport swal from 'sweetalert';\n\n//const apiKey = '696e9369164547f080e155915201402'\n\n//Sends call to WeatherAPI.com and dispatches results to searchResultsReducer for storage\nfunction* searchApi(action) {\n    try {\n        yield dispatch({\n            type: 'CLEAR_RESULTS',\n        })\n        const search = yield call (axios.get, `https://api.weatherapi.com/v1/forecast.json?key=${process.env.REACT_APP_API_KEY}&q=${action.payload}&days=4`);\n        yield JSON.stringify(search);\n        yield dispatch({\n            type: 'SEARCH_RESULTS',\n            payload: search,\n        })    \n    } catch (error) { \n        swal({\n            title: \"No Results Found\",\n            text: \"Please enter a valid city or zip code.\",\n            icon: \"warning\",\n          });\n    }\n\n}\n\nfunction* searchApiSaga() {\n    yield takeEvery('SEARCH_WEATHER_API', searchApi);\n}\n\nexport default searchApiSaga;","import { all } from 'redux-saga/effects';\nimport searchApiSaga from './searchApiSaga';\n\nexport default function* rootSaga() {\n  yield all([\n    searchApiSaga(),\n  ]);\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport axios from 'axios';\nimport './index.css';\nimport App from './App';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\n\nimport createSagaMiddleware from 'redux-saga';\n\nimport reducer from './redux/reducers';\n\nimport rootSaga from './redux/sagas';\n\nconst preloadedState = {};\nconst middlewares = [];\nconst sagaMiddleware = createSagaMiddleware();\nmiddlewares.push(sagaMiddleware);\n\nconst storeInstance = createStore(\n  reducer,\n  preloadedState,\n  applyMiddleware(...middlewares),\n);\n\nsagaMiddleware.run(rootSaga);\n\nReactDOM.render(\n    <Provider store={storeInstance}>\n    <App />\n  </Provider>,\n  document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}