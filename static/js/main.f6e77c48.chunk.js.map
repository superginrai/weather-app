{"version":3,"sources":["components/ResultWeather/ResultWeather.js","components/ResultForecast/ResultForecast.js","components/SearchPage/SearchPage.js","components/ForecastPage/ForecastPage.js","App.js","serviceWorker.js","redux/reducers/searchResultsReducer.js","redux/reducers/index.js","redux/sagas/searchApiSaga.js","redux/sagas/index.js","index.js"],"names":["WeatherCard","props","state","weather","location","result","data","name","region","temp","current","temp_f","condition","text","icon","minTemp","forecast","forecastday","day","mintemp_f","maxTemp","maxtemp_f","classes","this","Card","className","card","CardMedia","CardContent","Typography","gutterBottom","variant","component","src","alt","CardActions","Component","connect","withStyles","theme","maxWidth","marginBottom","media","height","button","margin","spacing","unit","ForecastCard","date","slice","ForecastPage","handleSearch","event","setState","search","target","value","apiCall","preventDefault","action","type","payload","dispatch","console","log","history","push","root","Grid","container","justify","Paper","alignitems","paper","onSubmit","item","xs","FormControl","InputLabel","htmlFor","Input","onChange","placeholder","style","marginTop","Button","size","color","searchResults","flexGrow","alignItems","padding","textAlign","palette","secondary","map","ResultWeather","key","id","ResultForecast","App","exact","from","to","path","SearchPage","Boolean","window","hostname","match","combineReducers","store","searchApi","searchApiSaga","call","axios","get","JSON","stringify","takeEvery","rootSaga","all","middlewares","sagaMiddleware","createSagaMiddleware","storeInstance","createStore","reducer","applyMiddleware","run","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f6e77c48.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { withStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\n\n\nconst styles = theme => ({\n    card: {\n        maxWidth: 400,\n        marginBottom: 50,\n    },\n    media: {\n        height: 530,\n    },\n    button: {\n        margin: theme.spacing.unit,\n    },\n});\n\nconst mapStateToProps = state => ({\n\n});\n\nclass WeatherCard extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            weather: {\n                location: this.props.result.data.location.name,\n                region: this.props.result.data.location.region,\n                temp: this.props.result.data.current.temp_f,\n                condition: this.props.result.data.current.condition.text,\n                icon: this.props.result.data.current.condition.icon,\n                minTemp: this.props.result.data.forecast.forecastday[this.props.day].day.mintemp_f,\n                maxTemp: this.props.result.data.forecast.forecastday[this.props.day].day.maxtemp_f,\n                \n\n                // image_url: 'images/vitaLove.jpg',\n                // genre_id: this.props.result.genres[0],\n                // description: this.props.result.summary,\n                // complete: false,\n                // sealed: false,\n            }\n        }\n    }\n\n    render() {\n        const { classes } = this.props;\n        return (\n            <div>\n                <Card className={classes.card}>\n                    <CardMedia\n                        // className={classes.media}\n                        // image={this.state.game.image_url}\n                        // title={this.state.game.summary}\n                    />\n                    <CardContent>\n                        <Typography gutterBottom variant=\"headline\" component=\"h2\">\n                            {this.state.weather.location}, {this.state.weather.region}\n                        </Typography>\n                        <img src={this.state.weather.icon} alt=\"condition icon\"></img>\n                        <Typography gutterBottom variant=\"headline\" component=\"h4\">\n                            {this.state.weather.condition}\n                        </Typography>\n                        <Typography gutterBottom variant=\"headline\" component=\"h3\">\n                            {this.state.weather.temp}&#176;\n                        </Typography>\n                        <Typography gutterBottom variant=\"headline\" component=\"h4\">\n                            High: {this.state.weather.maxTemp}&#176;\n                            Low: {this.state.weather.minTemp}&#176;\n                        </Typography>\n                        <CardActions>\n                            {/* <Button onClick={this.props.addNewGame(this.state.game)} variant=\"fab\" color=\"primary\" className={classes.button}>\n                                <AddIcon />\n                            </Button> */}\n                            {/* Add this game to your collection */}\n                        </CardActions>\n                    </CardContent>\n                </Card>\n            </div>\n        );\n    }\n}\n\nWeatherCard.propTypes = {\n    classes: PropTypes.object.isRequired,\n};\n\nexport default connect(mapStateToProps)(withStyles(styles)(WeatherCard));","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { withStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\n\n\nconst styles = theme => ({\n    card: {\n        maxWidth: 400,\n        marginBottom: 50,\n    },\n    media: {\n        height: 530,\n    },\n    button: {\n        margin: theme.spacing.unit,\n    },\n});\n\nconst mapStateToProps = state => ({\n\n});\n\nclass ForecastCard extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            weather: {\n                date: (this.props.result.data.forecast.forecastday[this.props.day].date).slice(5),\n                icon: this.props.result.data.forecast.forecastday[this.props.day].day.condition.icon,\n                minTemp: this.props.result.data.forecast.forecastday[this.props.day].day.mintemp_f,\n                maxTemp: this.props.result.data.forecast.forecastday[this.props.day].day.maxtemp_f,\n                \n            }\n        }\n    }\n\n    render() {\n        const { classes } = this.props;\n        return (\n            <div>\n                <Card className={classes.card}>\n                    <CardMedia\n                        // className={classes.media}\n                        // image={this.state.game.image_url}\n                        // title={this.state.game.summary}\n                    />\n                    <CardContent>\n                        <Typography gutterBottom variant=\"headline\" component=\"h3\">\n                            {this.state.weather.date}\n                        </Typography>\n                        <img src={this.state.weather.icon} alt=\"condition icon\"></img>\n                        <Typography gutterBottom variant=\"headline\" component=\"h4\">\n                            High: {this.state.weather.maxTemp}&#176;\n                            Low: {this.state.weather.minTemp}&#176;\n                        </Typography>\n                        <CardActions>\n                            {/* <Button onClick={this.props.addNewGame(this.state.game)} variant=\"fab\" color=\"primary\" className={classes.button}>\n                                <AddIcon />\n                            </Button> */}\n                            {/* Add this game to your collection */}\n                        </CardActions>\n                    </CardContent>\n                </Card>\n            </div>\n        );\n    }\n}\n\nForecastCard.propTypes = {\n    classes: PropTypes.object.isRequired,\n};\n\nexport default connect(mapStateToProps)(withStyles(styles)(ForecastCard));","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport axios from 'axios';\nimport Input from '@material-ui/core/Input';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport Button from '@material-ui/core/Button';\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport ResultWeather from '../ResultWeather/ResultWeather'\nimport ResultForecast from '../ResultForecast/ResultForecast'\n//import './App.css';\n\nconst styles = theme => ({\n  root: {\n      flexGrow: 1,\n      justify: 'center',\n      alignItems: 'center',\n  },\n  paper: {\n      justify: 'center',\n      alignItems: 'center',\n      padding: theme.spacing(3),\n      textAlign: 'center',\n      marginTop: '50px',\n      color: theme.palette.text.secondary,\n  },\n});\n\nconst mapReduxStateToProps = state => ({\n    searchResults: state.searchResults.searchResults,\n});\n\n// const mapReduxStateToProps = (reduxState) => (\n//     { reduxState }\n// );\n\nclass ForecastPage extends Component {\n  \n  constructor(props) {\n    super(props)\n\n    this.state = {\n        search: '',\n    };\n}\n\n  handleSearch = () => event => {\n    this.setState({\n        ...this.state.search,\n        search: event.target.value,\n    });\n  }\n\n\n  apiCall = event => {\n    \n    event.preventDefault();\n    const action = { type: 'SEARCH_WEATHER_API', payload: this.state.search, };\n    this.props.dispatch(action);\n    console.log(action);\n    console.log(this.state.search);\n    this.setState({\n            search: '',      \n    });\n    this.props.history.push('/forecast');\n\n\n  };\n\n  render() {\n       const { classes } = this.props;\n      return (\n\n\n<div className={classes.root}>\n<Grid container spacing={8} justify={'center'}>\n    <Paper alignitems={'center'} className={classes.paper}>\n        <form onSubmit={this.apiCall}>\n            <Grid item xs>\n                <FormControl>\n                    <InputLabel htmlFor=\"apiSearch\">\n                        Search:</InputLabel>\n                        <Input className=\"input\" onChange={this.handleSearch()} value={this.state.search} placeholder='city' />\n                </FormControl>\n                {/* <Button variant=\"contained\" size=\"small\" color=\"primary\" type=\"submit\">\n                    GET FORECAST</Button> */}\n            </Grid>\n            <Grid item xs style={{ marginTop: 35 }}>\n                <Button variant=\"contained\" size=\"small\" color=\"primary\" type=\"submit\">\n                    GET FORECAST</Button>\n            </Grid>\n        </form>\n       \n    </Paper>\n</Grid>\n</div>\n      );\n\n  }\n}\n\nForecastPage.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default connect(mapReduxStateToProps)(withStyles(styles)(ForecastPage));","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport axios from 'axios';\nimport Input from '@material-ui/core/Input';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport Button from '@material-ui/core/Button';\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport ResultWeather from '../ResultWeather/ResultWeather'\nimport ResultForecast from '../ResultForecast/ResultForecast'\n//import './App.css';\n\nconst styles = theme => ({\n  root: {\n      flexGrow: 1,\n      justify: 'center',\n      alignItems: 'center',\n  },\n  paper: {\n      justify: 'center',\n      alignItems: 'center',\n      padding: theme.spacing(3),\n      textAlign: 'center',\n      marginTop: '50px',\n      color: theme.palette.text.secondary,\n  },\n});\n\nconst mapReduxStateToProps = state => ({\n    searchResults: state.searchResults.searchResults,\n});\n\n// const mapReduxStateToProps = (reduxState) => (\n//     { reduxState }\n// );\n\nclass ForecastPage extends Component {\n  \n  constructor(props) {\n    super(props)\n\n    this.state = {\n        search: '',\n    };\n}\n\n  handleSearch = () => event => {\n    this.setState({\n        ...this.state.search,\n        search: event.target.value,\n    });\n  }\n\n\n  apiCall = event => {\n    \n    // let apiKey = '696e9369164547f080e155915201402';\n\n    // axios({\n    //     url: `http://api.weatherapi.com/v1/current.json?key=696e9369164547f080e155915201402&q=${this.state.search}`,\n    //     method: 'GET',\n    // })\n    //     .then(response => {\n    //         let weather = response.data.current.temp_f;\n    //         console.log(response.data);\n    //         console.log(weather);\n    //         this.setState({\n    //             tempF: weather,\n    //         });\n    //     })\n    //     .catch(err => {\n    //         console.error(err);\n    //     });\n\n    event.preventDefault();\n    const action = { type: 'SEARCH_WEATHER_API', payload: this.state.search, };\n    this.props.dispatch(action);\n    console.log(action);\n    console.log(this.state.search);\n    this.setState({\n   \n            search: '',\n        \n    });\n\n        // const action = { type: 'SEARCH_WEATHER_API', payload: this.state.search }\n        // this.props.dispatch(action);\n        // console.log(this.props.reduxState.weather);\n        // console.log(this.state.search);\n        // this.setState({\n        //     search: '',    \n        //});\n\n  };\n\n  render() {\n       const { classes } = this.props;\n      return (\n          // <div>\n          //     <button onClick={this.apiCall}>Go for temp! </button>\n          //     The temperature in <input className=\"input\" onChange={this.handleSearch()} value={this.state.search} placeholder='location' /> is {this.state.tempF} degrees F right now!\n\n              \n\n          // </div>\n\n<div className={classes.root}>\n<Grid container spacing={3} justify={'center'}>\n    <Paper alignitems={'center'} className={classes.paper}>\n    {/* <Grid container spacing={3} alignitems={'center'}>      */}\n        <form onSubmit={this.apiCall}>\n            <Grid item xs>\n                <FormControl>\n                    <InputLabel htmlFor=\"apiSearch\">\n                        Search:</InputLabel>\n                        <Input className=\"input\" onChange={this.handleSearch()} value={this.state.search} placeholder='city' />\n                </FormControl>\n            </Grid>\n            <Grid item xs style={{ marginTop: 35 }}>\n                <Button variant=\"contained\" size=\"small\" color=\"primary\" type=\"submit\">\n                    GET FORECAST</Button>\n            </Grid>\n        </form>\n\n        {/* The temperature is {this.props.searchResultsmap(result =>\n                             <li> key={result.id} result={result}/>)} degrees F right now!  */}\n           {/* <ul> { this.props.searchResults.map (item => <li key={item.id}>{item.data.current.temp_f} tacos</li>) }</ul> */}\n           {/* <ul>{this.props.searchResults.searchResults.data.current.temp_f}</ul> */}\n\n        <Grid container spacing={3} alignitems={'center'}>       \n            <Grid item xs={12}>\n                    <ul>\n                        {this.props.searchResults.map(result =>\n                            <ResultWeather key={result.id} result={result} day={0}/>)}\n                    </ul>\n            </Grid>\n\n                <Grid item xs={3}>\n                    <ul>\n                        {this.props.searchResults.map(result =>\n                            <ResultForecast key={result.id} result={result} day={1}/>)}\n                    </ul>\n                </Grid>\n                <Grid item xs={3}>\n                    <ul>\n                        {this.props.searchResults.map(result =>\n                            <ResultForecast key={result.id} result={result} day={2}/>)}\n                    </ul>\n                </Grid>\n                <Grid item xs={3}>\n                    <ul>\n                        {this.props.searchResults.map(result =>\n                            <ResultForecast key={result.id} result={result} day={3}/>)}\n                    </ul>\n                </Grid>\n            </Grid>\n        {/* </Grid> */}\n    </Paper>\n</Grid>\n</div>\n      );\n\n  }\n}\n\nForecastPage.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default connect(mapReduxStateToProps)(withStyles(styles)(ForecastPage));","import React, { Component } from 'react';\nimport './index.css';\nimport SearchPage from './components/SearchPage/SearchPage';\nimport ForecastPage from './components/ForecastPage/ForecastPage';\nimport { BrowserRouter as Router, Route, Redirect, Switch } from 'react-router-dom';\n\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Router>\n          <Switch>\n            <Redirect exact from=\"/\" to=\"/forecast\" />\n            <Route\n              path=\"/search\"\n              component={SearchPage} />\n            <Route\n              path=\"/forecast\"\n              component={ForecastPage} />\n          </Switch>\n        </Router>\n\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { combineReducers } from 'redux';\n\nconst searchResults = (state = [], action) => {\n    switch (action.type) {\n        case 'SEARCH_RESULTS':\n            console.log(action.payload);\n            return [action.payload];\n        default:\n            return state;\n    }\n};\n\n// const forecastResults = (state = [], action) => {\n//     switch (action.type) {\n//         case 'FORECAST_RESULTS':\n//             console.log(action.payload);\n//             return [action.payload];\n//         default:\n//             return state;\n//     }\n// };\n\nexport default combineReducers({\n    searchResults,\n});","import { combineReducers } from 'redux';\nimport searchResults from './searchResultsReducer';\n\nconst store = combineReducers({\n  searchResults,\n});\n\nexport default store;\n","import axios from 'axios';\nimport { takeEvery, call, put as dispatch } from 'redux-saga/effects';\n\nfunction* searchApi(action) {\n    try {\n        console.log('are we there yet?', action.payload)\n        const search = yield call (axios.get, `http://api.weatherapi.com/v1/forecast.json?key=696e9369164547f080e155915201402&q=${action.payload}&days=4`);\n        console.log(search);\n        yield JSON.stringify(search);\n        yield dispatch({\n            type: 'SEARCH_RESULTS',\n            payload: search,\n        })\n    } catch (error) { }\n\n}\n\nfunction* searchApiSaga() {\n    yield takeEvery('SEARCH_WEATHER_API', searchApi);\n}\n\nexport default searchApiSaga;","import { all } from 'redux-saga/effects';\nimport searchApiSaga from './searchApiSaga';\n\nexport default function* rootSaga() {\n  yield all([\n    searchApiSaga(),\n    // watchIncrementAsync()\n  ]);\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport axios from 'axios';\nimport './index.css';\nimport App from './App';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { takeEvery, call, put as dispatch } from 'redux-saga/effects';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\n\nimport createSagaMiddleware from 'redux-saga';\n\nimport reducer from './redux/reducers';\n\nimport rootSaga from './redux/sagas';\n\n// const weather = (state = [], action) => {\n//     if (action.type === 'SEARCH_WEATHER_API') {\n//         axios({\n//             url: `http://api.weatherapi.com/v1/current.json?key=696e9369164547f080e155915201402&q=${action.payload}`,\n//             method: 'GET',\n//         })\n//             .then(response => {\n                 \n//             })\n//             .catch(err => {\n//                 console.error(err);\n//             });\n//         return [...state, ...action.payload];\n\n//     } else if (action.type === 'RESET') {\n//         return [];\n//     }\n//     return state;\n// };\n\n// const searchResults = (state = [], action) => {\n//     switch (action.type) {\n//         case 'SEARCH_RESULTS':\n//             return action.payload;\n//         default:\n//             return state;\n//     }\n// };\n\n// const searchResults = (state = [], action) => {\n//     if (action.type === 'SEARCH_RESULTS') {\n//         console.log(action);\n//         return [...state, ...action.payload];\n//     } else if (action.type === 'RESET') {\n//         return [];\n//     }\n//     return state;\n// };\n\n// const tacos = (state = [], action) => {\n//     if (action.type === 'SEARCH_WEATHER_API') {\n//         console.log(action);\n//         return [...state, ...action.payload];\n//     } else if (action.type === 'RESET') {\n//         return [];\n//     }\n// };\n\n// const storeInstance = createStore(\n//     combineReducers({\n//         searchResults,\n//         // tacos,\n//     }),\n//    // applyMiddleware(logger),\n// )\n\nconst preloadedState = {};\nconst middlewares = [];\nconst sagaMiddleware = createSagaMiddleware();\nmiddlewares.push(sagaMiddleware);\n\n// if (process.env.NODE_ENV === 'development') {\n//   middlewares.push(logger);\n// }\n\nconst storeInstance = createStore(\n  reducer,\n  preloadedState,\n  applyMiddleware(...middlewares),\n);\n\nsagaMiddleware.run(rootSaga);\n\nReactDOM.render(\n    <Provider store={storeInstance}>\n    <App />\n  </Provider>,\n  document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}